=head1 NAME

mio - EINTR-safe IO functions with reliable return values

=head1 SYNOPSIS

Handling IO in C is unnecessarily difficult.  Improperly handled signals can
interrupt low-level read/write calls and standard C<FILE> functions are plagued
by useless or unreliable return values.  B<mio> provides a series of wrappers
that attempt to overcome both of these problems.

=head1 DESCRIPTION

=head2 Signals

The system read/write calls can be interrupted by signals.  By default signals
are either ignored or terminate the program, so the interrupted call is of no
consequence.  If the program modifies this behavior and catches signals,
however, the interrupted calls may cause programs to abort IO operations too
soon.  This may be prevented by setting the C<SA_RESTART> flag when assigning
the signal handler.  This is not a practical solution for libraries, which
would be forced to modify all signal handler flags for each IO operation and
reset them afterwards.  Instead B<mio>'s functions detect C<EINTR> and retry
the operation.

=head2 Return Values

Many standard IO functions have poor return values.  C<fgets> returns a pointer
to the buffer being read into, which is not only useless as the caller must
already have that value but also leaves no way for the caller to reliably get
the length of the data read into the buffer.  C<getline> and C<getdelim> tried
to rectify this problem, but they return a signed C<ssize_t> value to represent
the length of data written to the buffer.  According to getdlim(3P) they B<may>
fail with C<EOVERFLOW> if the delimiter or C<EOF> is not seen within
C<SSIZE_MAX> bytes but do not have to, making the returned size unreliable.

=head2 Read Functions

=over

=item int mio_getc(FILE *f)

=item int mio_getc_unlocked(FILE *f)

=item char *mio_fgets(char *s, size_t n, FILE *f)

Similar to fgets(3) except a pointer to the terminating NUL byte is returned
rather than a pointer to the buffer.

=item char *mio_getdelim(char **s, size_t *n, int delim, FILE *f)

Similar to getdelim(3) except the return type is C<size_t> and C<0> is returned
on EOF or errors rather than C<-1>.

=item char *mio_getline(char **s, size_t *n, FILE *f)

Similar to getline(3) except the return type is C<size_t> and C<0> is returned
on EOF or errors rather than C<-1>.

=item void *mio_fread

=item void *mio_read

=item void *mio_read_all

Call I<mio_read> in a loop until C<count> bytes have been read, C<EOF> is
reached or an error other than C<EINTR> is encountered.

=back

=head2 Write Functions

=over

=item size_t mio_write

=item size_t mio_fwrite

=item size_t mio_fprintf

=item size_t mio_vfprintf

=item size_t mio_fputs

=item size_t mio_fputc

=back

=head2 Other Functions

=over

=item int mio_open

=item int mio_openat

=item FILE *mio_fopen

=item FILE *mio_fopenat

=item FILE *mio_fdopen

=item FILE *mio_freopen

=item int mio_pselect

=item int mio_select

=item int mio_fflush

=item int mio_closedir

=item int mio_readdir

readdir(3P) returns NULL to indicate both errors and the end of the listing.
The only way for callers to differentiate between the two is to clear C<errno>
beforehand and check afterwards.  C<mio_readdir> handles clearing, checking,
and restoring C<errno> as necessary for the caller.  NOTE: if the caller is not
concerned about modifying C<errno> on success, it is faster to just clear
C<errno> manually like so:

 while(errno = 0, (ent = readdir(dirp))) {
     /* loop through directory contents */
 }
 if(errno != 0) {
     /* handle error */
 }

=back

=head1 EXAMPLES

 #include "mio.c"

 int main(void) {
     char *end, *buf = NULL;
     size_t len = 0;
     while((end = mio_getdelim(&buf, &len, '\n', stdin)) > 0) {
         /* do something with buf */
     }
     if(!feof(stdin)) {
         /* something went wrong that prevented us from reaching the end */
         return 1;
     } else {
         return 0;
     }
 }

=head1 CAVEATS

feof(3) must be used rather than ferror(3) to check for errors from
I<mio_getline> and I<mio_getdelim> because POSIX does not provide a way to set
the error flag for C<FILE> streams.

B<mio> does B<NOT> retry on C<EAGAIN> or C<EWOULDBLOCK>.

=head1 COPYRIGHT AND LICENSE

Copyright 2015 Andrew Gregory <andrew.gregory.8@gmail.com>

Permission is hereby granted, free of charge, to any person obtaining a copy of
this software and associated documentation files (the "Software"), to deal in
the Software without restriction, including without limitation the rights to
use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies
of the Software, and to permit persons to whom the Software is furnished to do
so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

=head1 SEE ALSO

Project URL: L<http://github.com/andrewgregory/mINI>

=over

=item http://git.kernel.org/cgit/git/git.git/tree/wrapper.c

=back
